generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  email            String         @unique
  password         String
  userName         String         @unique
  is_Professional  Boolean        @default(false)
  is_Youtuber      Boolean        @default(false)
  accessToken      String?        @db.VarChar(300)
  hashRefreshToken String?        @db.VarChar(300)
  refreshExpiresAt DateTime?
  access           Access?
  likes            Liked[]
  likedTags        LikedTag[]
  professional     Professional?
  followers        Subscription[] @relation("follow")
  subscriptions    Subscription[] @relation("subscription")
  tags             Tags[]
  youtuber         Youtuber?
}

model Category {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  likes Liked[]
  tags  Tags[]
}

model Liked {
  userId     Int
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, categoryId], name: "likedId")
}

model LikedTag {
  userId Int
  tagId  Int
  tag    Tags @relation(fields: [tagId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, tagId], name: "likedTagId")
}

model Tags {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  categoryId Int
  userId     Int
  likedTag   LikedTag[]
  category   Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  followedUserId  Int
  subscribeUserId Int
  followedUser    User @relation("follow", fields: [followedUserId], references: [id])
  subscribeUser   User @relation("subscription", fields: [subscribeUserId], references: [id])

  @@id([subscribeUserId, followedUserId], name: "subscriptionId")
}

model Youtuber {
  userId     Int    @unique
  tagChannel String
  id         Int    @id @default(autoincrement())
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Professional {
  id                     Int    @id @default(autoincrement())
  userId                 Int    @unique
  urlLinkedin            String @unique
  recommandationLinkedin Json
  user                   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Access {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  createdAt DateTime? @default(now())
  ipAdress  String?
  userAgent String?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
