name: Lint, build & test

on:
    push:
        branches: ['main']
    pull_request:
        branches: ['main']

jobs:
    lint:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repo
              uses: actions/checkout@v5

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 22

            - name: Install dependancies
              run: npm ci

            - name: Run ESLint
              run: npm run lint

            - name: Run Prettier check
              run: npm run format:check

    type-check:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repo
              uses: actions/checkout@v5

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 22

            - name: Install dependancies
              run: npm ci

            - name: Run TypeScript type check
              run: npm run type-check

    build:
        needs: [lint, type-check]

        runs-on: ubuntu-latest

        steps:
            - name: Checkout repo
              uses: actions/checkout@v5

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 22

            - name: Install dependancies
              run: npm ci

            - name: Run build
              run: npm run build

    tests:
        needs: build

        runs-on: ubuntu-latest

        services:
            postgres:
                image: postgres:16
                ports:
                    - 5432:5432
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: testdb
                options: >-
                    --health-cmd="pg_isready -U postgres"
                    --health-interval=10s
                    --health-timeout=5s
                    --health-retries=5

        steps:
            - name: Checkout repo
              uses: actions/checkout@v5

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 22
                  cache: 'npm'

            - name: Install dependancies
              run: npm ci

            - name: Wait for Postgres
              run: |
                  until pg_isready -h localhost -p 5432 -U postgres; do
                    echo "Waiting for postgres..."
                    sleep 2
                  done

            - name: Prisma generate
              run: npx prisma generate

            - name: Push schema to test DB
              env:
                  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
              run: npx prisma db push

            # - name: Reset DB before tests
            #   env:
            #       DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
            #   run: npx prisma migrate reset --force --skip-generate --skip-seed

            - name: Seed test DB
              env:
                  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
              run: npx ts-node prisma/seed/test-seed.ts

            - name: Run test with coverage
              env:
                  JWT_SECRET: test-secret
                  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
              run: npm run test:all -- --coverage

            - name: List workspace
              run: ls -R

            - name: Upload coverage report
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-report
                  path: coverage/lcov-report
                  retention-days: 7

    build-and-push-docker-image:
        needs: tests

        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v5

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Build and push backend image
              uses: docker/build-push-action@v6
              with:
                  push: true
                  platforms: linux/amd64,linux/arm64
                  tags: |
                      ${{ secrets.DOCKER_USERNAME }}/youlinkbackend:latest
                      ${{ secrets.DOCKER_USERNAME }}/youlinkbackend:${{ github.sha }}

    deploy:
        needs: build-and-push-docker-image

        runs-on: ubuntu-latest

        container: ghcr.io/railwayapp/cli:latest

        env:
          SVC_ID: Links-to-Experts-Back
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

        steps:
            - name: Checkout repo
              uses: actions/checkout@v4

            - name: Deploy to Railway
              run: railway up --service=${{ env.SVC_ID }}
